data Maybe a = Nothing | Just a
data Asset = Image { bytes::Array Byte } | FBX { model::FBXModel }
data Either a b = Left a | Right b

trait Show a {
    show::a -> String
}

trait Functor a {
    fmap:: f a -> (a -> b) -> f b
}

data Single = Single Int String

impl Single {
    log() = {
        Console.log(this.0)
    }
}

randomInt::Int -> Int -> Int
randomInt(min,max) = ffi_random(min,max)

random100::Int
random100 = randomInt(0,100)

var litNumber::Int
var litNumber0 = 666 * 2
var litNumber::Int
var litNumber = pow(3.1416926 * 2)



main:: ()
main = {
    Console.log("enter main");
    var unitMgr:UnitMgr String = UnitMgr.default();
    var unitA = unitMgr.createUnit(1000);
    var hero = unitMgr.getHero(222);
    var unitB = unitA.fmap(_ + "_hh");
    runAff(affFn,(resp) => {


    })
}

--Aff是异步Monad
--bind:: m a -> (a -> m b) -> m b
-- do {} 块是bind的语法糖。
-- requestJson.bind(resp => saveToDiskASync(resp))
affFn::Aff JsonValue
affFn = do {
    resp <- requestJson
    _ <- waitSecond 2
    saveToDiskASync resp
}

data Unit (a:Clone + Show + Default) {
    gId::Long,
    hp::Int,
    mp::Int,
    exInfo::a
} derive Clone + Show + Default

impl Functor a for Unit {
    fmap(unit,f) = {
        var newUnit = unit.clone();
        newUnit.exInfo = f(unit.exInfo)
        newUnit
    }
}

impl Unit a {
  info::String
  info = "static function"

  damage::Self -> Int -> ()
  damage(num) = {
      this.hp -= num;
  }
}

impl Show a for Unit String {
    show unit = unit.exInfo
}

data Hero a extends Unit {
    name::String
}

impl Hero a {
    logName = log(this.name)
    damage::Self -> Int -> ()
    damage(num) = {
        if (this.hp < 100) {
            this.hp -= num * 0.5;
        } else {
            this.hp -= num;
        }
    }
}



var unitMgr = UnitMgr.default()

data UnitMgr a {
    unitList::Array Unit a
} derive Default

impl UnitMgr a {
    createUnit::Self -> Int -> a -> Unit a
    createUnit(tmplId,exInfo) = {
       var tmpl = Table.loadUnit(tmplId)
       Unit {
            gId = UUID.New(),
            hp = tmpl.HP,
            mp = tmpl.MP,
            exInfo = exInfo
       }
    }

    doDamage::Self -> Int -> Unit a -> Unit a -> ()
    doDamage(num,srcUnit,dstUnit) = {
        dstUnit.damge(num);
    }

    getUnit::Self -> Long -> Maybe Unit a
    getUnit(gId) = {
        this.unitList.find(_.gId == gId)
    }

    getHero::Self -> Long -> Maybe Hero a
    getHero(gId) = {
        this.unitList.find(_.gId == gId).flatMap(_.downcast)
    }
}